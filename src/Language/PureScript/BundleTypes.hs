-----------------------------------------------------------------------------
--
-- Module      :  psc-bundle
-- Copyright   :  (c) Phil Freeman 2015
-- License     :  MIT
--
-- Maintainer  :  Phil Freeman <paf31@cantab.net>
-- Stability   :  experimental
-- Portability :
--
-- | Bundles compiled PureScript modules for the browser.
--
-- This module takes as input the individual generated modules from 'Language.PureScript.Make' and
-- performs dead code elimination, filters empty modules,
-- and generates the final Javascript bundle.
-----------------------------------------------------------------------------

{-# LANGUAGE PatternGuards #-}

module Language.PureScript.BundleTypes where

import Language.JavaScript.Parser

-- | Unpack the node inside a JSNode. This is useful when pattern matching.
node :: JSNode -> Node
node (NN n) = n
node (NT n _ _) = n

nt :: Node -> JSNode
nt n = NT n tokenPosnEmpty []

lf :: JSNode
lf = NT (JSLiteral "") tokenPosnEmpty [ WhiteSpace tokenPosnEmpty "\n" ]

sp :: Node -> JSNode
sp n = NT n tokenPosnEmpty [ WhiteSpace tokenPosnEmpty " " ]

nl :: Node -> JSNode
nl n = NT n tokenPosnEmpty [ WhiteSpace tokenPosnEmpty "\n" ]

accessor :: Node -> Maybe String
accessor (JSMemberDot [ exports ] _ nm)
  | JSIdentifier "exports" <- node exports
  , JSIdentifier name <- node nm
  = Just name
accessor (JSMemberSquare [ exports ] _ nm _)
  | JSIdentifier "exports" <- node exports
  , JSExpression [e] <- node nm
  , JSStringLiteral _ name <- node e
  = Just name
accessor _ = Nothing

setAccessor :: Node -> String -> Maybe Node
setAccessor (JSMemberDot l m _nm) name
  = Just (JSMemberDot l m (nt (JSIdentifier name)))
setAccessor (JSMemberSquare [ exports ] l nm r) name
  | JSIdentifier "exports" <- node exports
  = Just (JSMemberSquare [ exports ] l (NN (JSExpression [nt (JSStringLiteral '"' name)])) r)
setAccessor _ _ = Nothing

-- | Modules are either "regular modules" (i.e. those generated by psc) or foreign modules.
data ModuleType
  = Regular
  | Foreign
  deriving (Show, Read, Eq, Ord)

showModuleType :: ModuleType -> String
showModuleType Regular = "Regular"
showModuleType Foreign = "Foreign"

-- | A module is identified by its module name and its type.
data ModuleIdentifier = ModuleIdentifier String ModuleType deriving (Show, Read, Eq, Ord)

moduleName :: ModuleIdentifier -> String
moduleName (ModuleIdentifier name _) = name

-- | A piece of code is identified by its module and its name. These keys are used to label vertices
-- in the dependency graph.
type Key = (ModuleIdentifier, String)

-- | An export is either a "regular export", which exports a name from the regular module we are in,
-- or a reexport of a declaration in the corresponding foreign module.
--
-- Regular exports are labelled, since they might re-export an operator with another name.
data ExportType
  = RegularExport String
  | ForeignReexport
  deriving (Show, Read, Eq, Ord)

-- | There are four types of module element we are interested in:
--
-- 1) Require statements
-- 2) Member declarations
-- 3) Export lists
-- 4) Everything else
--
-- Each is labelled with the original AST node which generated it, so that we can dump it back
-- into the output during codegen.
data ModuleElement
  = Require JSNode String (Either String ModuleIdentifier)
  | Member JSNode Bool String [JSNode] [Key]
  | ExportsList [(ExportType, String, JSNode, [Key])]
  | Other JSNode
  deriving (Show, Read)

-- | A module is just a list of elements of the types listed above.
data Module = Module ModuleIdentifier [ModuleElement] deriving (Show, Read)
